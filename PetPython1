# -------------------------------------------#
# Операторы, переменные, типы данных, условия
# -------------------------------------------#

# 1. Определить, является ли год високосным
year = int(input())
if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
    print("Високосный")
else:
    print("Обычный")

# 2. Калькулятор, который считывает с пользовательского ввода три строки:
# первое число, второе число и операцию, после чего применяет операцию к введённым числам
# ("первое число" "операция" "второе число") и выводит результат на экран.
a = float(input())
b = float(input())
op = input()

if op == '+':
    print(a + b)
elif op == '-':
    print(a - b)
elif op == '*':
    print(a * b)
elif op == '/':
    if b != 0:
        print(a / b)
    else:
        print("Деление на 0!")
elif op == 'mod':
    if b != 0:
        print(a % b)
    else:
        print("Деление на 0!")
elif op == 'div':
    if b != 0:
        print(a // b)
    else:
        print("Деление на 0!")
elif op == 'pow':
    print(a ** b)

# Вычисление площади фигуры
figure = input()
if figure == "треугольник":
    a = float(input())
    b = float(input())
    c = float(input())
    p = (a + b + c) / 2
    s = (p * (p - a) * (p - b) * (p - c)) ** (1 / 2)
    print(s)
elif figure == "прямоугольник":
    a = float(input())
    b = float(input())
    print(a * b)
elif figure == "круг":
    r = float(input())
    print(3.14 * (r ** 2))

# На входе три числа. На выходе максимальное, минимальное, оставшееся
a, b, c = int(input()), int(input()), int(input())
if a <= b <= c:
    print(c, '\n', a, '\n', b)
elif a <= c <= b:
    print(b, '\n', a, '\n', c)
elif b <= a <= c:
    print(c, '\n', b, '\n', a)
elif b <= c <= a:
    print(a, ' \n', b, '\n', c)
elif c <= a <= b:
    print(b, '\n', c, '\n', a)
elif c <= b <= a:
    print(a, '\n', c, '\n', b)

# Склонение слова "программист"
a = int(input())
word = "программист"
if 11 <= a % 100 < 20:
    print(a, word + "ов")
elif a % 10 == 1:
    print(a, word)
elif a % 10 in [2, 3, 4]:
    print(a, word + "а")
elif a % 10 in [0, 5, 6, 7, 8, 9]:
    print(a, word + "ов")

# Счастливый билетик
a = input()
sa = split(a)
if (int(sa[0]) + int(sa[1]) + int(sa[2]) == int(sa[3]) + int(sa[4]) + int(sa[5])):
    print("Счастливый")
else:
    print("Обычный")

# -------------------------------------------#
# Циклы, строки, списки
# -------------------------------------------#

# Считывание чисел. После первого нуля вывод суммы ранее введенных чисел
summa = 0
a = int(input())
while a:
    summa += a
    a = int(input())
print(summa)

# Наименьшее целое число, делящееся на два других (a,b) без остатка
a, b = int(input()), int(input())
d = max(a, b) ** 2
d_min = d
while d > 0:
    if d % a == 0 and d % b == 0:
        d_min = d
    d -= 1
print(d_min)

# Считывание чисел по одному
# если число меньше 10, то пропускаем это число;
# если число больше 100, то прекращаем считывать числа;
# в остальных случаях вывести это число обратно на консоль в отдельной строке.
code = True
a = int(input())
while code:
    if a > 100:
        code = False
        break
    elif a < 10:
        try:
            a = int(input())
        except:
            break
    else:
        print(a)
        try:
            a = int(input())
        except:
            break

# Умножение всех чисел одного отрезка на все числа другого
a, b, c, d = int(input()), int(input()), int(input()), int(input())
for j in range(c, d + 1):
    print('\t', j, end='')
print()

for i in range(a, b + 1):
    print(i, end='\t')
    for j in range(c, d + 1):
        print(i * j, end='\t')
    print()

# Среднее арифметическое всех чисел отрезка, кратных 3
a, b = int(input()), int(input())
count = 0
summa = 0
for i in range(a, b + 1):
    if i % 3 == 0:
        summa += i
        count += 1
print(summa / count)

# Процентное содержание символов G и C в строке
string = input()
gc_count = 0
for s in string.lower():
    if ('g' in s) or ('c' in s):
        gc_count += 1
print((gc_count / len(string)) * 100)

# Алгоритм сжатия повторяющихся символов строки
# 'aaaabbсaa' -> 'a4b2с1a2'
string = input()
s = string[0]
count = 1
res = string[0]

for st in string[1:]:
    if st == s:
        count += 1
    else:
        res = res + str(count) + st
        s = st
        count = 1
res = res + str(count)
print(res)

# Сумма чисел строки
print(sum([int(i) for i in input().split()]))

# Для каждого элемента списка вывести сумму его соседей, циклично относительно длины строки
string = input()
splited = string.split()
length = len(splited)

if length == 1:
    print(splited[0])
else:
    for i in range(length):
        print(int(splited[(i + 1) % length]) + int(splited[(i - 1) % length]), end=' ')

# Вывод чисел строки, которые встечаются более одного раза
string = input()
numbers = [int(i) for i in string.split()]

for i in set(numbers):
    count = numbers.count(i)
    if count != 1:
        print(i, end=' ')

# Cчитывание чисел по одному, пока сумма введенных чисел не станет == 0
numbers = []
summa = int(input())
numbers.append(summa)
while summa:
    a = int(input())
    numbers.append(a)
    summa += a
print(sum([x * x for x in numbers]))

# Вывод последовательности 1 22 333 4444 55555
# число повторяется столько раз, чему равно
# количество элементов задается
length = int(input())
j = 0
count = 0
while length > 0:
    j += 1
    count = j
    while count > 0 and length > 0:
        print(str(j), end=' ')
        count -= 1
        length -= 1

# Вывод всех позиций в списке по возрастанию, на которых встречается заданное число
lst = [int(x) for x in input().split()]
num = int(input())

if num not in lst:
    print("Отсутствует")
else:
    for i, x in enumerate(lst):
        if x == num:
            print(i, end=' ')

# Вывод матрицы, у которой каждый элемент в позиции i, j
# равен сумме элементов первой матрицы на позициях (i-1, j), (i+1, j), (i, j-1), (i, j+1).
# У крайних символов соседний элемент находится с противоположной стороны матрицы.
# В случае одной строки/столбца элемент сам себе является соседом по соответствующему направлению.
matrix = []
rows = 0
columns = 0
string = input()
columns = len([int(i) for i in string.split()])

while string != "end":
    rows += 1
    matrix.append([int(i) for i in string.split()])
    string = input()

sum_matrix = [[0 for col in range(columns)] for row in range(rows)]
for i in range(rows):
    for j in range(columns):
        for di in [-1, 1]:
            sum_matrix[i][j] += matrix[(i + di) % rows][j]
        for dj in [-1, 1]:
            sum_matrix[i][j] += matrix[i][(j + dj) % columns]

for i in range(rows):
    for j in range(columns):
        print(sum_matrix[i][j], end=' ')
    print()

# Таблица n*n, где числа от 1 до n**2 закручены по спирали по часовой стрелке
length = int(input())
matrix = [[0 for col in range(length)] for row in range(length)]

count = 1
end = length * length

a = 0
b = length - 1

while end > 0:
    i = a
    for j in range(a, b + 1):
        matrix[i][j] = count
        count += 1
        end -= 1
    j = b
    for i in range(a + 1, b + 1):
        matrix[i][j] = count
        count += 1
        end -= 1
    i = b
    for j in range(a + 1, b + 1):
        matrix[i][length - 1 - j] = count
        count += 1
        end -= 1
    j = a
    for i in range(a + 1, b):
        matrix[length - 1 - i][j] = count
        count += 1
        end -= 1
    a += 1
    b -= 1

for i in range(length):
    for j in range(length):
        print(matrix[i][j], end=' ')
    print()

# ----------------------------------------------#
# Функции, словари, интерпретатор, файлы, модули
# ----------------------------------------------#

# Функция по формуле (1)
def f(x):
    if x <= -2:
        return 1 - (x + 2) ** 2
    elif -2 < x <= 2:
        return -x / 2
    else:
        return (x - 2) ** 2 + 1

# Функция принимает на вход список целых чисел,
# удаляет из него все нечётные значения, а чётные нацело делит на два
def modify_list(l):
    l[:] = [x // 2 for x in l if x % 2 == 0]

# Функция модифицирует словарь:
# если ключ есть в словаре, значение добавляется в список по этому ключу,
# если ключа нет, то значение добавляется в список по ключу 2*ключ
# если ключа 2*ключ нет в словаре, добавить его в словарь и сопоставить ему список из переданного элемента
def update_dictionary(d, key, value):
    list_value = [value]
    if key in d:
        d[key].append(value)
    else:
        if 2 * key not in d:
            d[2 * key] = list_value
        else:
            d[2 * key].append(value)

# Подсчет числа слов в строке в формате слово:количество без повторений
my_list = input().split()
my_list[:] = [x.lower() for x in my_list]

def num_count(my_list, my_dict):
    for x in my_list:
        if x in my_dict:
            my_dict[x] += 1
        else:
            my_dict[x] = 1
    return my_dict

my_dict = {}
num_count(my_list, my_dict)
for item in sorted(my_dict):
    print("%s %d" % (item, my_dict[item]))

# Подсчет значения функции f без повторений
n = int(input())
counted_dict = {}
while n > 0:
    string = int(input())
    if string in counted_dict:
        print(counted_dict[string])
    else:
        counted_dict[string] = f(string)
        print(counted_dict[string])
    n -= 1

# Обратная операция сжатию текста: 'a3b4c2e10b1' -> 'aaabbbbcceeeeeeeeeeb'
with open("dataset_3363_2.txt", 'r') as inpf:
    line = inpf.readline().strip()

with open("answer.txt", 'w') as otpf:
    num = []
    for i, s in enumerate(line):
        if not s.isdigit():
            if (len(num)):
                length = int(''.join(map(str, num)))
                while length > 0:
                    otpf.write(symbol)
                    length -= 1
            num = []
            symbol = s
        else:
            num.append(int(s))

    length = int(''.join(map(str, num)))
    while length > 0:
        otpf.write(symbol)
        length -= 1

# Вывод самого частого слова в тексте и числа его вхождений
def value_counter(my_string, my_dict):
    for s in my_string.split(' '):
        if s in my_dict:
            my_dict[s] += 1
        else:
            my_dict[s] = 1

my_dict = {}
with open("dataset_3363_3(2).txt", 'r') as inpf:
    for line in inpf:
        line = line.strip().lower()
        value_counter(line, my_dict)

sorted_keys = sorted(my_dict, key=my_dict.get, reverse=True)
print(sorted_keys[0], my_dict[sorted_keys[0]])

# Обзор успеваемости студентов по таблице
# имя - оценка математика - оценка физика - оценка русский
# вычисление средней оценки по каждому предмету для каждого студента
# вычисление средней оценки по каждому предмету для всех студентов
mean1 = mean2 = mean3 = 0.
num_lines = 0.

st_mean = []
with open("dataset_3363_4.txt", 'r') as inpf:
    for line in inpf:
        num_lines += 1
        line = line.strip().split(';')
        mean1 += int(line[1])
        mean2 += int(line[2])
        mean3 += int(line[3])
        st_mean.append((int(line[1]) + int(line[2]) + int(line[3])) / 3)

print(st_mean)
with open("res.txt", 'w') as otpf:
    for st in st_mean:
        otpf.write(str(st))
        otpf.write('\n')
    otpf.write(str(mean1 / num_lines))
    otpf.write(' ')
    otpf.write(str(mean2 / num_lines))
    otpf.write(' ')
    otpf.write(str(mean3 / num_lines))

# Программа запускается из консоли и печатает значения всех переданных аргументов на экран
import sys

lst = sys.argv[1:]
print(*lst)

# В файле указан адрес другого файла, который нужно скачать с использованием модуля request
# и посчитать число строк в нем
import requests

with open("dataset_3378_2.txt", 'r') as inpf:
    url = inpf.readline().strip()
    print(url)
r = requests.get(url)
print(len(r.text.splitlines()))

# Имеется набор файлов, каждый из которых, кроме последнего, содержит имя следующего файла.
# Первое слово в тексте последнего файла: "We".
# Скачайте предложенный файл. В нём содержится ссылка на первый файл из этого набора.
# Все файлы располагаются в каталоге по адресу:
# https://stepic.org/media/attachments/course67/3.6.3/
# Загрузите содержимое последнего файла из набора, как ответ на это задание.
import requests

with open("dataset_3378_3(1).txt", 'r') as inpf:
    url = inpf.readline().strip()
    r = requests.get(url)
while True:
    print(r.text)
    if r.text[:2] == "We":
        break
    next_url = "https://stepik.org/media/attachments/course67/3.6.3/" + r.text
    print(next_url)
    r = requests.get(next_url)

# Список игр футбольных команд с результатом матча.
# Вывести сводную таблицу результатов всех матчей.
# За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.
# Вывод программы необходимо оформить следующим образом:
# Команда:Всего_игр Побед Ничьих Поражений Всего_очков
m = int(input())
dct = {}
def scores(a, b):
    if a > b:
        return 3
    elif a == b:
        return 1
    return 0

while m > 0:
    line = input().split(';')
    # print(line)
    s1 = int(line[1])
    s2 = int(line[3])
    if line[0] not in dct:
        dct[line[0]] = [scores(int(s1), int(s2))]
    else:
        dct[line[0]].append(scores(int(s1), int(s2)))

    if line[2] not in dct:
        dct[line[2]] = [scores(int(s2), int(s1))]
    else:
        dct[line[2]].append(scores(int(s2), int(s1)))
    m -= 1

for item in dct:
    print(item, end='')
    print(':', end='')
    print(len(dct[item]), ' ', end='')
    print(dct[item].count(3), ' ', end='')
    print(dct[item].count(1), ' ', end='')
    print(dct[item].count(0), ' ', end='')
    print(sum(dct[item]))

# Зашифрование и расшифрование подстановки
# abcd
# *d%#
sh1, sh2, enc, dec = input(), input(), input(), input()
print('\n', sh1, '\n', sh2, '\n', enc, '\n', dec, '\n', )

sh_dct = {}
for i in zip(sh1, sh2):
    sh_dct[i[0]] = i[1]
print(sh_dct)

print(enc)
for s in enc:
    print(sh_dct[s], end='')

print(dec)
for s in dec:
    for key, item in sh_dct.items():
        if item == s:
            print(key, end='')

# Проверка орфографии на основании списка известных слов
et_len = int(input())
right_words = []
while et_len > 0:
    right_words.append(input().lower().strip())
    et_len -= 1

c_len = int(input())
check_words = []
while c_len > 0:
    check_words.append(input().lower().strip())
    c_len -= 1

check_words = (' '.join(check_words)).split()
error_words = set()
for word in check_words:
    if word not in right_words:
        error_words.add(word)
for w in error_words:
    print(w)

# Дрессированная черепаха ходит
# север 10
# запад 20
# юг 30
# восток 40

steps = int(input())
x = 0
y = 0
while steps:
    line = input().split()
    if line[0] == 'север':
        y += int(line[1])
    elif line[0] == 'юг':
        y -= int(line[1])
    elif line[0] == 'восток':
        x += int(line[1])
    else:
        x -= int(line[1])
    steps -= 1

print(x, end=' ')
print(y, end=' ')

# Информация о среднем росте детей в каждом классе
dct = {}
with open("dataset_3380_5(3).txt", 'r') as inpf:
    for line in inpf:
        line = line.split()
        if line[0] not in dct:
            dct[line[0]] = [line[1:]]
        else:
            dct[line[0]].append(line[1:])

hights = {}
for item in dct:
    summa = 0
    for student in dct[item]:
        summa += int(student[1])
    hights[item] = summa / len(dct[item])

sorted_hights = dict(sorted(hights.items(), key=lambda x: int(x[0])))

print()
for item in sorted_hights:
    if sorted_hights[item] == 0:
        print(item, '-')
    else:
        print(item, sorted_hights[item])
